// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  homepage       String?
  aboutyou       String?
  githubname     String?
  twittername    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           UserRole  @default(FREE)
  accounts       Account[]
}

enum UserRole {
  FREE
  PRIME
  VIP
}

enum RequiredRole {
  FREE
  PRIME
  VIP
}

enum ChapterStatus {
  DRAFT
  COMPLETED
  PUBLISHED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Waitlist {
    id             String  @id @default(cuid())
    name           String?
    email          String? @unique
    aiDescription  String?
    twitterID      String?
}

model orderlist {
    id                      String   @id @default(cuid())
    name                    String?
    email                   String?   
    checkout_session_id     String?  @unique
    priceid                 String?
    githubusername          String?
    productname             String? 
    amount                  Float? 
    addtime                 String?
}

model Course {
    id          String    @id @default(cuid())
    title       String
    description String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    chapters    Chapter[]
}

model Chapter {
    id             String        @id @default(cuid())
    chapterNumber  String        // e.g., "chapter1"
    title          String
    description    String?
    status         ChapterStatus @default(DRAFT)
    requiredRole   RequiredRole  @default(FREE)
    order          Int
    courseId       String
    course         Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
    lessons        Lesson[]
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt

    @@unique([courseId, chapterNumber])
    @@unique([courseId, order])
}

model Lesson {
    id           String       @id @default(cuid())
    title        String
    duration     String?
    url          String
    previewUrl   String?
    isPreview    Boolean      @default(false)
    requiredRole RequiredRole @default(FREE)
    videoUrl     String?
    order        Int
    chapterId    String
    chapter      Chapter      @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    @@unique([chapterId, order])
}