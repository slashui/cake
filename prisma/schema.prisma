generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(cuid())
  name               String?
  email              String?      @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  homepage           String?
  aboutyou           String?
  githubname         String?
  twittername        String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  role               UserRole     @default(FREE)
  accounts           Account[]
  createdInviteCodes InviteCode[] @relation("CreatedInviteCodes")
  usedInviteCodes    InviteCode[]
  userCourses        UserCourse[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Waitlist {
  id            String  @id @default(cuid())
  name          String?
  email         String? @unique
  aiDescription String?
  twitterID     String?
}

model orderlist {
  id                  String  @id @default(cuid())
  name                String?
  email               String?
  checkout_session_id String? @unique
  priceid             String?
  githubusername      String?
  productname         String?
  amount              Float?
  addtime             String?
}

model Course {
  id                String             @id @default(cuid())
  title             String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  category          String?
  courseId          String             @unique
  price             Float?
  status            CourseStatus       @default(DRAFT)
  thumbnail         String?
  metadata          Json?              // 存储额外的课程元数据
  inviteCodeCourses InviteCodeCourse[]
  userCourses       UserCourse[]
  chapters          Chapter[]          // 关联章节
}

model UserCourse {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  grantedAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model InviteCode {
  id        String             @id @default(cuid())
  code      String             @unique
  status    InviteCodeStatus   @default(UNUSED)
  createdAt DateTime           @default(now())
  usedAt    DateTime?
  usedBy    String?
  expiresAt DateTime?
  createdBy String
  creator   User               @relation("CreatedInviteCodes", fields: [createdBy], references: [id])
  user      User?              @relation(fields: [usedBy], references: [id])
  courses   InviteCodeCourse[]
}

model InviteCodeCourse {
  id           String     @id @default(cuid())
  inviteCodeId String
  courseId     String
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  inviteCode   InviteCode @relation(fields: [inviteCodeId], references: [id], onDelete: Cascade)

  @@unique([inviteCodeId, courseId])
}

enum UserRole {
  FREE
  PRIME
  VIP
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Chapter {
  id            String     @id @default(cuid())
  courseId      String
  chapterNumber String     // chapter1, chapter2 等
  title         String     // 显示名称
  description   String?
  order         Int        // 章节排序
  status        CourseStatus @default(DRAFT)
  requiredRole  UserRole   @default(FREE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  course        Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons       Lesson[]   // 关联课时

  @@unique([courseId, chapterNumber])
}

model Lesson {
  id            String     @id @default(cuid())
  chapterId     String
  lessonNumber  String     // lesson1, lesson2 等
  title         String     // 显示名称
  duration      String?    // 时长，如"30分钟"
  order         Int        // 课时排序
  content       String?    // MDX内容
  videoUrl      String?    // 视频链接
  streamId      String?    // 流媒体ID
  thumbnail     String?    // 缩略图
  materials     Json?      // 课程资料 JSON数组
  isPreview     Boolean    @default(false) // 是否可预览
  requiredRole  UserRole   @default(FREE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  chapter       Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([chapterId, lessonNumber])
}

enum InviteCodeStatus {
  UNUSED
  USED
  EXPIRED
}
